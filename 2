{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "visualisation",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 904
        },
        "id": "uh59g3vNW_qX",
        "outputId": "94ea52e7-1573-480c-cb64-da1fb31b20ba"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     index                 series_name            network season  \\\n",
              "0        1  Scooby Doo, Where Are You!                CBS      1   \n",
              "1        2  Scooby Doo, Where Are You!                CBS      1   \n",
              "2        3  Scooby Doo, Where Are You!                CBS      1   \n",
              "3        4  Scooby Doo, Where Are You!                CBS      1   \n",
              "4        5  Scooby Doo, Where Are You!                CBS      1   \n",
              "..     ...                         ...                ...    ...   \n",
              "598    599   Scooby-Doo and Guess Who?          Boomerang      2   \n",
              "599    600           Warner Home Video  Warner Home Video  Movie   \n",
              "600    601           Warner Home Video  Warner Home Video  Movie   \n",
              "601    602   Scooby-Doo and Guess Who?          Boomerang      2   \n",
              "602    603   Scooby-Doo and Guess Who?          Boomerang      2   \n",
              "\n",
              "                                    title  imdb  engagement  date_aired  \\\n",
              "0               What a Night for a Knight   8.1       556.0  1969-09-13   \n",
              "1                   A Clue for Scooby Doo   8.1       479.0  1969-09-20   \n",
              "2                    Hassle in the Castle   8.0       455.0  1969-09-27   \n",
              "3                  Mine Your Own Business   7.8       426.0  1969-10-04   \n",
              "4                   Decoy for a Dognapper   7.5       391.0  1969-10-11   \n",
              "..                                    ...   ...         ...         ...   \n",
              "598  The Dreaded Remake of Jekyll & Hyde!   NaN         NaN  2020-10-01   \n",
              "599          Happy Halloween, Scooby-Doo!   6.3       978.0  2020-10-06   \n",
              "600   Scooby-Doo! The Sword and the Scoob   6.2       422.0  2020-02-23   \n",
              "601               Dark Diner of Route 66!   NaN         NaN  2021-02-25   \n",
              "602                       Total Jeopardy!   NaN         NaN  2020-11-13   \n",
              "\n",
              "     run_time     format  ... batman scooby_dum scrappy_doo hex_girls  \\\n",
              "0          21  TV Series  ...  False      False       False     False   \n",
              "1          22  TV Series  ...  False      False       False     False   \n",
              "2          21  TV Series  ...  False      False       False     False   \n",
              "3          21  TV Series  ...  False      False       False     False   \n",
              "4          21  TV Series  ...  False      False       False     False   \n",
              "..        ...        ...  ...    ...        ...         ...       ...   \n",
              "598        22  TV Series  ...  False      False       False     False   \n",
              "599        76      Movie  ...  False      False       False     False   \n",
              "600        77      Movie  ...  False      False       False     False   \n",
              "601        22  TV Series  ...  False      False       False     False   \n",
              "602        23  TV Series  ...  False      False       False     False   \n",
              "\n",
              "    blue_falcon       fred_va                  daphnie_va      velma_va  \\\n",
              "0         False  Frank Welker  Stefanianna Christopherson  Nicole Jaffe   \n",
              "1         False  Frank Welker  Stefanianna Christopherson  Nicole Jaffe   \n",
              "2         False  Frank Welker  Stefanianna Christopherson  Nicole Jaffe   \n",
              "3         False  Frank Welker  Stefanianna Christopherson  Nicole Jaffe   \n",
              "4         False  Frank Welker  Stefanianna Christopherson  Nicole Jaffe   \n",
              "..          ...           ...                         ...           ...   \n",
              "598       False  Frank Welker                Grey DeLisle  Kate Micucci   \n",
              "599       False  Frank Welker                Grey DeLisle  Kate Micucci   \n",
              "600       False  Frank Welker                Grey DeLisle  Kate Micucci   \n",
              "601       False  Frank Welker                Grey DeLisle  Kate Micucci   \n",
              "602       False  Frank Welker                Grey DeLisle  Kate Micucci   \n",
              "\n",
              "           shaggy_va     scooby_va  \n",
              "0        Casey Kasem   Don Messick  \n",
              "1        Casey Kasem   Don Messick  \n",
              "2        Casey Kasem   Don Messick  \n",
              "3        Casey Kasem   Don Messick  \n",
              "4        Casey Kasem   Don Messick  \n",
              "..               ...           ...  \n",
              "598  Matthew Lillard  Frank Welker  \n",
              "599  Matthew Lillard  Frank Welker  \n",
              "600  Matthew Lillard  Frank Welker  \n",
              "601  Matthew Lillard  Frank Welker  \n",
              "602  Matthew Lillard  Frank Welker  \n",
              "\n",
              "[603 rows x 75 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e07fa8e-a0ff-449a-afba-63d64db34225\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>series_name</th>\n",
              "      <th>network</th>\n",
              "      <th>season</th>\n",
              "      <th>title</th>\n",
              "      <th>imdb</th>\n",
              "      <th>engagement</th>\n",
              "      <th>date_aired</th>\n",
              "      <th>run_time</th>\n",
              "      <th>format</th>\n",
              "      <th>...</th>\n",
              "      <th>batman</th>\n",
              "      <th>scooby_dum</th>\n",
              "      <th>scrappy_doo</th>\n",
              "      <th>hex_girls</th>\n",
              "      <th>blue_falcon</th>\n",
              "      <th>fred_va</th>\n",
              "      <th>daphnie_va</th>\n",
              "      <th>velma_va</th>\n",
              "      <th>shaggy_va</th>\n",
              "      <th>scooby_va</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Scooby Doo, Where Are You!</td>\n",
              "      <td>CBS</td>\n",
              "      <td>1</td>\n",
              "      <td>What a Night for a Knight</td>\n",
              "      <td>8.1</td>\n",
              "      <td>556.0</td>\n",
              "      <td>1969-09-13</td>\n",
              "      <td>21</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Stefanianna Christopherson</td>\n",
              "      <td>Nicole Jaffe</td>\n",
              "      <td>Casey Kasem</td>\n",
              "      <td>Don Messick</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Scooby Doo, Where Are You!</td>\n",
              "      <td>CBS</td>\n",
              "      <td>1</td>\n",
              "      <td>A Clue for Scooby Doo</td>\n",
              "      <td>8.1</td>\n",
              "      <td>479.0</td>\n",
              "      <td>1969-09-20</td>\n",
              "      <td>22</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Stefanianna Christopherson</td>\n",
              "      <td>Nicole Jaffe</td>\n",
              "      <td>Casey Kasem</td>\n",
              "      <td>Don Messick</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Scooby Doo, Where Are You!</td>\n",
              "      <td>CBS</td>\n",
              "      <td>1</td>\n",
              "      <td>Hassle in the Castle</td>\n",
              "      <td>8.0</td>\n",
              "      <td>455.0</td>\n",
              "      <td>1969-09-27</td>\n",
              "      <td>21</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Stefanianna Christopherson</td>\n",
              "      <td>Nicole Jaffe</td>\n",
              "      <td>Casey Kasem</td>\n",
              "      <td>Don Messick</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Scooby Doo, Where Are You!</td>\n",
              "      <td>CBS</td>\n",
              "      <td>1</td>\n",
              "      <td>Mine Your Own Business</td>\n",
              "      <td>7.8</td>\n",
              "      <td>426.0</td>\n",
              "      <td>1969-10-04</td>\n",
              "      <td>21</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Stefanianna Christopherson</td>\n",
              "      <td>Nicole Jaffe</td>\n",
              "      <td>Casey Kasem</td>\n",
              "      <td>Don Messick</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Scooby Doo, Where Are You!</td>\n",
              "      <td>CBS</td>\n",
              "      <td>1</td>\n",
              "      <td>Decoy for a Dognapper</td>\n",
              "      <td>7.5</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1969-10-11</td>\n",
              "      <td>21</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Stefanianna Christopherson</td>\n",
              "      <td>Nicole Jaffe</td>\n",
              "      <td>Casey Kasem</td>\n",
              "      <td>Don Messick</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>599</td>\n",
              "      <td>Scooby-Doo and Guess Who?</td>\n",
              "      <td>Boomerang</td>\n",
              "      <td>2</td>\n",
              "      <td>The Dreaded Remake of Jekyll &amp; Hyde!</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2020-10-01</td>\n",
              "      <td>22</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Grey DeLisle</td>\n",
              "      <td>Kate Micucci</td>\n",
              "      <td>Matthew Lillard</td>\n",
              "      <td>Frank Welker</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>600</td>\n",
              "      <td>Warner Home Video</td>\n",
              "      <td>Warner Home Video</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Happy Halloween, Scooby-Doo!</td>\n",
              "      <td>6.3</td>\n",
              "      <td>978.0</td>\n",
              "      <td>2020-10-06</td>\n",
              "      <td>76</td>\n",
              "      <td>Movie</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Grey DeLisle</td>\n",
              "      <td>Kate Micucci</td>\n",
              "      <td>Matthew Lillard</td>\n",
              "      <td>Frank Welker</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>600</th>\n",
              "      <td>601</td>\n",
              "      <td>Warner Home Video</td>\n",
              "      <td>Warner Home Video</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Scooby-Doo! The Sword and the Scoob</td>\n",
              "      <td>6.2</td>\n",
              "      <td>422.0</td>\n",
              "      <td>2020-02-23</td>\n",
              "      <td>77</td>\n",
              "      <td>Movie</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Grey DeLisle</td>\n",
              "      <td>Kate Micucci</td>\n",
              "      <td>Matthew Lillard</td>\n",
              "      <td>Frank Welker</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>601</th>\n",
              "      <td>602</td>\n",
              "      <td>Scooby-Doo and Guess Who?</td>\n",
              "      <td>Boomerang</td>\n",
              "      <td>2</td>\n",
              "      <td>Dark Diner of Route 66!</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-02-25</td>\n",
              "      <td>22</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Grey DeLisle</td>\n",
              "      <td>Kate Micucci</td>\n",
              "      <td>Matthew Lillard</td>\n",
              "      <td>Frank Welker</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602</th>\n",
              "      <td>603</td>\n",
              "      <td>Scooby-Doo and Guess Who?</td>\n",
              "      <td>Boomerang</td>\n",
              "      <td>2</td>\n",
              "      <td>Total Jeopardy!</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2020-11-13</td>\n",
              "      <td>23</td>\n",
              "      <td>TV Series</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>Frank Welker</td>\n",
              "      <td>Grey DeLisle</td>\n",
              "      <td>Kate Micucci</td>\n",
              "      <td>Matthew Lillard</td>\n",
              "      <td>Frank Welker</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>603 rows × 75 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e07fa8e-a0ff-449a-afba-63d64db34225')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6e07fa8e-a0ff-449a-afba-63d64db34225 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6e07fa8e-a0ff-449a-afba-63d64db34225');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"scoobydoo.csv\")\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "names = ['fred', 'daphnie', 'velma', 'shaggy', 'scooby']\n",
        "\n",
        "caught_by = []\n",
        "for i in range(0, df.shape[0]):\n",
        "  row = df.iloc[i]\n",
        "  caught_str = ''\n",
        "  for name in names:\n",
        "    if row['caught_' + name]:\n",
        "      caught_str += name.capitalize() + ', '\n",
        "  caught_str = caught_str.strip(', ')\n",
        "  if not caught_str:\n",
        "    caught_str = pd.NaT\n",
        "  caught_by.append(caught_str)"
      ],
      "metadata": {
        "id": "k6zK4Ww3XlKD"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.insert(16, 'caught_by', caught_by)"
      ],
      "metadata": {
        "id": "-VIUB8M3-Dmr"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "unmasked_by = []\n",
        "for i in range(0, df.shape[0]):\n",
        "  row = df.iloc[i]\n",
        "  unmasked_str = ''\n",
        "  for name in names:\n",
        "    if row['unmask_' + name]:\n",
        "      unmasked_str += name.capitalize() + ', '\n",
        "  unmasked_str = unmasked_str.strip(', ')\n",
        "  if not unmasked_str:\n",
        "    unmasked_str = pd.NaT\n",
        "  unmasked_by.append(unmasked_str)"
      ],
      "metadata": {
        "id": "JY7FI2I7-xL4"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.insert(27, 'unmasked_by', unmasked_by)"
      ],
      "metadata": {
        "id": "S8DSMEd2Ricn"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['unmasked_by']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7rsxEPVZSuZx",
        "outputId": "9ab165d3-c428-4f02-ff88-6292b4a03522"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      Scooby\n",
              "1        Fred\n",
              "2        Fred\n",
              "3        Fred\n",
              "4      Scooby\n",
              "        ...  \n",
              "598       NaT\n",
              "599       NaT\n",
              "600     Velma\n",
              "601       NaT\n",
              "602       NaT\n",
              "Name: unmasked_by, Length: 603, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = df[['index', 'caught_by', 'unmasked_by', 'imdb']]\n",
        "df2 = df2.dropna()\n",
        "df2[:8]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "eCMiRvdX3r-Q",
        "outputId": "4c083827-9b59-4167-b027-363cc519ac57"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    index       caught_by unmasked_by  imdb\n",
              "0       1  Shaggy, Scooby      Scooby   8.1\n",
              "1       2          Shaggy        Fred   8.1\n",
              "2       3          Scooby        Fred   8.0\n",
              "3       4            Fred        Fred   7.8\n",
              "4       5          Scooby      Scooby   7.5\n",
              "5       6            Fred        Fred   8.4\n",
              "6       7            Fred      Shaggy   7.6\n",
              "11     12          Scooby        Fred   8.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b09d513-4f56-423a-b2f4-3335dcf86c4d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>caught_by</th>\n",
              "      <th>unmasked_by</th>\n",
              "      <th>imdb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Shaggy, Scooby</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Shaggy</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Fred</td>\n",
              "      <td>7.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>7.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Shaggy</td>\n",
              "      <td>7.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b09d513-4f56-423a-b2f4-3335dcf86c4d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1b09d513-4f56-423a-b2f4-3335dcf86c4d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1b09d513-4f56-423a-b2f4-3335dcf86c4d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = pd.DataFrame([{\"index\": 0, \"caught_by\": pd.NaT, \"unmasked_by\": pd.NaT, \"imdb\": pd.NaT}])\n",
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "OF-w6Ukg9mCM",
        "outputId": "28222d01-ba15-4aaa-bd33-6712ef03188f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index caught_by unmasked_by imdb\n",
              "0      0       NaT         NaT  NaT"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90dbad55-7e61-4f40-a18e-b87725f17223\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>caught_by</th>\n",
              "      <th>unmasked_by</th>\n",
              "      <th>imdb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90dbad55-7e61-4f40-a18e-b87725f17223')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-90dbad55-7e61-4f40-a18e-b87725f17223 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-90dbad55-7e61-4f40-a18e-b87725f17223');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(0, df2.shape[0]):\n",
        "  row = df2.iloc[i]\n",
        "  caught_by = row['caught_by'].split(', ')\n",
        "  unmasked_by = row['unmasked_by'].split(\", \")\n",
        "  for c in caught_by:\n",
        "    for u in unmasked_by:\n",
        "      new_row = {\"index\": row[\"index\"], \"caught_by\": c, 'unmasked_by': u, 'imdb': row[\"imdb\"]}\n",
        "      new_row_df = pd.DataFrame([new_row])\n",
        "      df3 = pd.concat([df3, new_row_df])"
      ],
      "metadata": {
        "id": "qVZ57y4bEsN-"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3 = df3.dropna()\n",
        "df3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "XDzSJGwkGFHK",
        "outputId": "3f261565-c230-4add-d1a3-9e547f43559b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    index caught_by unmasked_by imdb\n",
              "0       1    Shaggy      Scooby  8.1\n",
              "0       1    Scooby      Scooby  8.1\n",
              "0       2    Shaggy        Fred  8.1\n",
              "0       3    Scooby        Fred  8.0\n",
              "0       4      Fred        Fred  7.8\n",
              "..    ...       ...         ...  ...\n",
              "0     562    Scooby     Daphnie  5.7\n",
              "0     562    Scooby       Velma  5.7\n",
              "0     577      Fred      Scooby  8.1\n",
              "0     584      Fred       Velma  8.4\n",
              "0     601     Velma       Velma  6.2\n",
              "\n",
              "[2617 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-800b0a85-40a3-4171-a7e2-f52b009a1901\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>caught_by</th>\n",
              "      <th>unmasked_by</th>\n",
              "      <th>imdb</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Shaggy</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>Shaggy</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Fred</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Fred</td>\n",
              "      <td>7.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>562</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Daphnie</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>562</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>Velma</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>577</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Scooby</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>584</td>\n",
              "      <td>Fred</td>\n",
              "      <td>Velma</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>601</td>\n",
              "      <td>Velma</td>\n",
              "      <td>Velma</td>\n",
              "      <td>6.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2617 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-800b0a85-40a3-4171-a7e2-f52b009a1901')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-800b0a85-40a3-4171-a7e2-f52b009a1901 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-800b0a85-40a3-4171-a7e2-f52b009a1901');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df4 = df3[['caught_by', 'unmasked_by', 'imdb']]"
      ],
      "metadata": {
        "id": "ALzP44HWPxUh"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df4 = df3.groupby(['caught_by', 'unmasked_by']).mean()"
      ],
      "metadata": {
        "id": "_6ubuW6OQih6"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df4 = df3.pivot_table(index=\"caught_by\", columns=\"unmasked_by\", values=\"imdb\")\n",
        "df4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "cU6L3f--QpVs",
        "outputId": "cf0e084e-ae6c-4a88-ad56-8e10da033f12"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "unmasked_by   Daphnie      Fred    Scooby    Shaggy     Velma\n",
              "caught_by                                                    \n",
              "Daphnie      6.739286  6.777273  6.727586  6.693750  6.759538\n",
              "Fred         6.815707  6.986047  6.767647  6.742105  6.941833\n",
              "Scooby       6.874545  7.082178  6.846341  6.754839  7.122772\n",
              "Shaggy       6.800000  6.947761  6.736667  6.672222  6.894643\n",
              "Velma        6.810160  6.884375  6.771875  6.726471  6.886463"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a57d2af8-cb3c-42a9-9833-545dc0572c91\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>unmasked_by</th>\n",
              "      <th>Daphnie</th>\n",
              "      <th>Fred</th>\n",
              "      <th>Scooby</th>\n",
              "      <th>Shaggy</th>\n",
              "      <th>Velma</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>caught_by</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Daphnie</th>\n",
              "      <td>6.739286</td>\n",
              "      <td>6.777273</td>\n",
              "      <td>6.727586</td>\n",
              "      <td>6.693750</td>\n",
              "      <td>6.759538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fred</th>\n",
              "      <td>6.815707</td>\n",
              "      <td>6.986047</td>\n",
              "      <td>6.767647</td>\n",
              "      <td>6.742105</td>\n",
              "      <td>6.941833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Scooby</th>\n",
              "      <td>6.874545</td>\n",
              "      <td>7.082178</td>\n",
              "      <td>6.846341</td>\n",
              "      <td>6.754839</td>\n",
              "      <td>7.122772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Shaggy</th>\n",
              "      <td>6.800000</td>\n",
              "      <td>6.947761</td>\n",
              "      <td>6.736667</td>\n",
              "      <td>6.672222</td>\n",
              "      <td>6.894643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Velma</th>\n",
              "      <td>6.810160</td>\n",
              "      <td>6.884375</td>\n",
              "      <td>6.771875</td>\n",
              "      <td>6.726471</td>\n",
              "      <td>6.886463</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a57d2af8-cb3c-42a9-9833-545dc0572c91')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a57d2af8-cb3c-42a9-9833-545dc0572c91 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a57d2af8-cb3c-42a9-9833-545dc0572c91');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "g9y_PTsERRCu"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df4, annot=True)\n",
        "plt.title(\"Average IMDB rating\")\n",
        "plt.xlabel('Who unmasked the monster')\n",
        "plt.ylabel('Who caught the monster')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "ObxaNcV3Q5qk",
        "outputId": "666a7281-0466-4675-9fdf-02009787bafc"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(33.0, 0.5, 'Who caught the monster')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "said = ['jeepers', 'jinkies', 'my_glasses', 'scooby_doo_where_are_you']\n",
        "\n",
        "for saying in said:\n",
        "  df5 = df[[saying, 'imdb']]\n",
        "  df5 = df5.dropna()\n",
        "\n",
        "  df5.plot(kind=\"scatter\", x=saying, y=\"imdb\")\n",
        "\n",
        "  plt.xlabel(f\"Times '{saying.replace('_', ' ')}' said\")\n",
        "  plt.ylabel(\"IMDB rating\")\n",
        "  plt.title(f'Times \"{saying.replace(\"_\", \" \")}\" said and IMDB rating')\n",
        "\n",
        "  #plt.savefig(f\"times_{saying.replace('_', ' ')}_said.png\")\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "K6CwDjpASmqv",
        "outputId": "909e9054-cce3-4fb8-9637-07dcf26ebe77"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
